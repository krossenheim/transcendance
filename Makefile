# Base directories
PROJECT_ROOT := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
OUTPUT_FILES_DIR := $(PROJECT_ROOT)out
SOURCES_DIR := $(PROJECT_ROOT)srcs
VOLUMES_DIR := $(OUTPUT_FILES_DIR)/transcendance_volumes/

# Docker compose & env
PATH_TO_COMPOSE_ENV_FILE := $(SOURCES_DIR)/globals.env
PATH_TO_COMPOSE := $(SOURCES_DIR)/compose.yml

# Base image
PATH_TO_BASE_IMAGE := $(SOURCES_DIR)/nodejs_base_image/Dockerfile
BASE_IMAGE_TAG := nodejs_base_image:1.0

# Network
TR_NETWORK_SUBNET = 172.18.0.0/16

# Path to dynamically created list of container names .js file for the base JS image
DYNAMIC_CONTAINER_NAMES_JS = "$(PROJECT_ROOT)/srcs/nodejs_base_image/appservice/_container_names.cjs"
$(NAME): all

all: build
	VOLUMES_DIR=${VOLUMES_DIR} docker compose -f "$(PATH_TO_COMPOSE)" --env-file "$(PATH_TO_COMPOSE_ENV_FILE)" up -d

dnginx:
	docker exec -it nginx cat /var/log/nginx/error.log

re: down all

down:
	VOLUMES_DIR=${VOLUMES_DIR} docker compose -f "$(PATH_TO_COMPOSE)" --env-file "$(PATH_TO_COMPOSE_ENV_FILE)" down

build: populate_container_names build_base_nodejs create_shared_volume_folder
	VOLUMES_DIR=${VOLUMES_DIR} docker compose -f "$(PATH_TO_COMPOSE)" --env-file "$(PATH_TO_COMPOSE_ENV_FILE)" build

build_base_nodejs:
	docker build -f "$(PATH_TO_BASE_IMAGE)" -t $(BASE_IMAGE_TAG) "$(PROJECT_ROOT)srcs/nodejs_base_image"

print_config: create_shared_volume_folder
	docker compose -f "$(PATH_TO_COMPOSE)" --env-file "$(PATH_TO_COMPOSE_ENV_FILE)" config

create_shared_volume_folder:
	if [ ! -d "$(VOLUMES_DIR)" ]; then \
		mkdir -p "$(VOLUMES_DIR)"; \
	fi

clean:
	docker compose -f "$(PATH_TO_COMPOSE)" --env-file "$(PATH_TO_COMPOSE_ENV_FILE)" down --volumes --rmi all --remove-orphans
	rm -rf "$(VOLUMES_DIR)"

babylon:
	 docker cp "$(PROJECT_ROOT)srcs/nginx/staticfiles/babylontest.html" nginx:/var/www/html/babylontest.html

install_yq:
	@command -v yq >/dev/null 2>&1 || { \
		echo "" | add-apt-repository ppa:rmescandon/yq; \
		apt update; \
		apt install yq -y; \
	}

populate_container_names: install_yq
	@echo "// This file is generated by a makefile target." > "$(DYNAMIC_CONTAINER_NAMES_JS)"
	@echo "const containerNames = [" >> "$(DYNAMIC_CONTAINER_NAMES_JS)"
	@yq < "$(PROJECT_ROOT)/srcs/compose.yml" | jq '.services | keys[]' \
		| awk 'NR>1{printf ","} {printf "%s", $$0} END{print ""}' \
		>> "$(DYNAMIC_CONTAINER_NAMES_JS)"
	@echo "];" >> "$(DYNAMIC_CONTAINER_NAMES_JS)"
	@echo "module.exports = { containerNames };" >> "$(DYNAMIC_CONTAINER_NAMES_JS)"


fclean: clean
	rm -rf "$(OUTPUT_FILES_DIR)"
	docker volume prune -f
	docker image prune -a -f
	docker system prune -a --volumes -f

list:
	docker ps -a

.PHONY: up down build all re clean list
