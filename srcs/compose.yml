services:
  nginx:
    container_name: nginx
    image: nginx
    env_file:
      - ./globals.env
      - ./nginx/site.env
    build:
      context: ./nginx
    restart: always
    ports:
      - "443:443"
    networks:
      transcendance_network:
        ipv4_address: ${NGINX_IPV4_ADDRESS}
  hub:
    container_name: ${HUB_NAME}
    image: ${HUB_NAME}
    env_file:
      - ./globals.env
      - ./${HUB_NAME}/service_env.env
    build:
      context: ./${HUB_NAME}
    restart: always
    networks:
      transcendance_network:
        ipv4_address: ${HUB_IPV4_ADDRESS}
  chat:
    container_name: ${CHATROOM_NAME}
    image: ${CHATROOM_NAME}
    env_file:
      - ./globals.env
      - ./${CHATROOM_NAME}/service_env.env
    build:
      context: ./${CHATROOM_NAME}
    restart: always
    networks:
      transcendance_network:
        ipv4_address: ${CHATROOM_IPV4_ADDRESS}
    depends_on:
      hub:
        condition: service_healthy
  db:
    container_name: ${DATABASE_NAME}
    image: ${DATABASE_NAME}
    env_file:
      - ./globals.env
      - ./${DATABASE_NAME}/service_env.env
    build:
      context: ./${DATABASE_NAME}
    restart: always
    networks:
      transcendance_network:
        ipv4_address: ${DATABASE_IPV4_ADDRESS}
    depends_on:
      hub:
        condition: service_healthy
    volumes:
      - databases:/etc/database_data
  auth:
    container_name: ${AUTH_NAME}
    image: ${AUTH_NAME}
    env_file:
      - ./globals.env
      - ./${AUTH_NAME}/service_env.env
    build:
      context: ./${AUTH_NAME}
    restart: always
    networks:
      transcendance_network:
        ipv4_address: ${AUTH_IPV4_ADDRESS}
    depends_on:
      hub:
        condition: service_healthy
  pong:
    container_name: ${PONG_NAME}
    image: ${PONG_NAME}
    env_file:
      - ./globals.env
      - ./${PONG_NAME}/service_env.env
    build:
      context: ./${PONG_NAME}
    restart: always
    # depends_on:
    #   hub:
    #     condition: service_healthy
    networks:
      transcendance_network:
        ipv4_address: ${PONG_IPV4_ADDRESS}
  users:
    container_name: ${USERS_NAME}
    image: ${USERS_NAME}
    env_file:
      - ./globals.env
      - ./${USERS_NAME}/service_env.env
    build:
      context: ./${USERS_NAME}
    restart: always
    # depends_on:
    #   hub:
    #     condition: service_healthy
    networks:
      transcendance_network:
        ipv4_address: ${USERS_IPV4_ADDRESS}

volumes:
  databases:
    name: databases
    driver_opts:
      type: none
      o: bind
      device: ${VOLUMES_DIR}

networks:
  transcendance_network:
    name: transcendance_network
    driver: bridge
    ipam:
      config:
        - subnet: ${TR_NETWORK_SUBNET}

